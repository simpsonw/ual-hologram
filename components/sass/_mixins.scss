// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
%el-invisible {
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
	clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
	position: static !important;
	clip: auto;
	height: auto;
	width: auto;
	overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
	@include element-invisible;

	&:active,
	&:focus {
		@include element-invisible-off;
	}
}

/* ===================================
		$MIXINS
	=================================== */

/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback
	Usage: @include font-size(1, large);
*/

/* ===================================
		$Typography
	=================================== */

@mixin sans-norm {
		font-family: $font-sans;
		font-weight: 400;
		strong{
				font-weight: 700;
		}
		.wf-inactive &{
				font-family: "Trebuchet MS", Verdana, "Verdana Ref", sans-serif;
		}
}
@mixin serif-norm {
		font-family: $font-serif;
		font-weight: 400;
		strong{
				font-weight: 700;
		}
}

@mixin font-size( $decimal-size, $keyword: null ) {
	@if $keyword{ font-size: $keyword; }
	@else { font-size: $decimal-size * $base-font-multiplier * 16px;}
	font-size: $decimal-size * 1rem;
}

// image replacement
%replace-text, .replace-text {
	overflow: hidden;
	&:before{
		content: "";
		display: block;
		width: 0;
		height: 100%;
	}
}

// clearfix
%cf {
	&:after {
		content:"";
		display:table;
		clear:both;
	}
}

@mixin form-fields {
	position: relative;
	padding: 5px 8px;
	border: solid 1px $gray-light;
	color: $gray-med;
	font-family: $font-sans;
	appearance: none;
}

@mixin form-field-focus {
		outline: 0;
		box-shadow: 0 0 3px rgba($field-focus-outline, 0.5);
		border-color: $field-focus-outline;
		background-color: $field-focus-bg;
}

@mixin form-button-focus {
		outline: 0;
		box-shadow: 0 0 2px 2px rgba($field-focus-outline, 1);
}
@mixin button($bg-color: $button-blue, $text-color: #fff) {
		display: inline-block;
		vertical-align: top;
		padding: 2px 10px 3px;
		-webkit-appearance: none;
		background-color: $bg-color;
		border-color: darken($bg-color,15%);
		color: $text-color;
		cursor: pointer;
		border-style: solid;
		border-width: 1px;
		border-radius: 3px;
		text-decoration: none;
		line-height: inherit;
		
		&:focus{
				@include form-button-focus;
		}

		&:hover{
			background-color: darken($bg-color,10%);
			border-color: darken($bg-color,20%);
		}
}

%transition {
	transition: all 0.2s ease;
}
@mixin transition($property...) {
	transition: {
		property: $property;
		duration: 0.2s;
		timing-function: ease;
	}
}
%droplet-bullet {
	position: relative;
	padding-left: 14px;
	&:before{
		content: ' ';
		display: block;
		position: absolute;
		width: 0;
		height: 0;
		left: 0;
		top: 50%;
		margin-top: -5px;
		border:{
			style: solid;
			width: 5px;
		}
		border-radius: 50% 0 50% 50%
	}
}
@mixin droplet-bullet-color($color: $blue) {
	&:before{
		border-color: tint($color,25%) $color $color tint($color,25%);
	}
}
%custom-bullet-list {
	a{
		/* TODO - make a mixin for these bullets */
		display: block;
		@extend %droplet-bullet;
		padding: 3px 0 3px 14px;
		text-decoration: none;
		&:visited{
			color: $link-color;
			/* remove for live links */
		}
		&:before{
			left: 2px;
			width: 4px;
			height: 4px;
			border: 0;
			background-color: tint($link-color,35%);
			border-radius: 50%;
			transform-origin: 50% 50%;
			margin-top: -2px;
		}
		&:hover{
			color: $link-hover-color;
			&:before{
				background-color: $link-hover-color;
				transform: scale(1.25);
			}
		}
	}
}

/**
 * Function that takes pixel font size value input and outputs em value
 * Handy because thinking in ems is kinda hard...
 * 
 * @param  {pixel value} $target: pixel value you want the thing to be
 * @param  {pixel value} $context the font size of the current element, default: $base-font-size
 * @return {em value} equivalent vale in ems
 */
@function em($target, $context: $base-font-size) {
	@return ($target / $context) * 1em;
}

/**
 * The layered triangle thing
 *
 * Requires:
 *  1. an element with an <i> element inside it
 *  2. relative position on parent element
 *
 * Notes:
 *  - $parent-height should be the height of the parent element.
 *  - Triangle height will be $parent-height * 2
 *  - We want the triangles to be taller so we don't see gaps between them because maths.
 *
 */

@mixin triangle-box($color: $az-blue-lt, $width: 150px, $spacing: 20px, $direction: left) {
	position: absolute;
	width: $width;
	height: 100%;
	top: 0;
	z-index: 0;

	@if $direction == left{
		left: 0;
	}

	@if $direction == right{
		right: 0;
	}

	&:before,
	&:after {
		position: absolute;
		top: 50%;
		left: 0;
		width: 0;
		height: 0;
		margin-top: -($width);
		content: '';
		z-index: 1;
		border: {
			style: solid;
			width: $width 0 $width $width;
		}
	}

	&:before {
		left: 0;
		border: {
			color: transparent transparent transparent shade($color, 20%);
		}
	}

	&:after {
		left: (2 * $spacing);
		z-index: 0;
		border: {
			color: transparent transparent transparent shade($color, 10%);
		}
	}
}

@mixin trans($property: all, $time: 0.2s, $func: ease) {
	transition: $property $time $func;
}
